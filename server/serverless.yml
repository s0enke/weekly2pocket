service: weekly2pocket

provider:
  name: aws
  runtime: python2.7

custom:
  websiteBucketName: weekly2pocket-${opt:stage}-websitebucket
  client:
    bucketName: ${self:custom.websiteBucketName} 

package:
  exclude:
     - node_modules

functions:
  hello:
    handler: handler.hello
    events:
      - http:
          path: users/create
          method: get
          cors: true

resources:
  Resources:
    WebsiteBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.websiteBucketName}
        AccessControl: PublicRead
        WebsiteConfiguration:
          IndexDocument: index.html
    WebsiteBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket:
          Ref: WebsiteBucket
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            Effect: Allow
            Principal: "*"
            Action: s3:GetObject
            Resource:
              Fn::Join:
                - ""
                - - "arn:aws:s3:::"
                  - Ref: WebsiteBucket
                  - "/*"
    WebsiteCdn:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          Origins:
            - DomainName:
                Fn::GetAtt:
                  - WebsiteBucket
                  - DomainName
              Id: Origin
              S3OriginConfig:
                OriginAccessIdentity: ""
          DefaultCacheBehavior:
            ForwardedValues:
              QueryString: false
            TargetOriginId: Origin
            ViewerProtocolPolicy: "allow-all"
          Enabled: true
          DefaultRootObject: "index.html"
          Aliases:
            - ${opt:domain-name}
          ViewerCertificate:
            AcmCertificateArn:
              Ref: WebsiteCertificate
            SslSupportMethod: sni-only
    WebsiteCertificate:
      Type: AWS::CertificateManager::Certificate
      Properties:
        DomainName: ${opt:domain-name}
        DomainValidationOptions:
          - DomainName: ${opt:domain-name}
            ValidationDomain: ${opt:hosted-zone}
    DnsCname:
      Type: "AWS::Route53::RecordSetGroup"
      Properties:
        HostedZoneName: ${opt:hosted-zone}.
        RecordSets:
          - Name: ${opt:domain-name}
            Type: CNAME
            TTL: 900
            ResourceRecords: 
              - Fn::GetAtt:
                  - WebsiteCdn
                  - DomainName
  Outputs:
    WebsiteBucket:
      Value:
        Ref: WebsiteBucket


plugins:
  - serverless-client-s3

